name: R Security Checks

on:
  push:
    paths:
      - '**.R'
      - '**.r'
      - 'DESCRIPTION'
      - 'renv.lock'
      - '.github/workflows/r-security.yml'
    branches: [ main, develop ]
  pull_request:
    paths:
      - '**.R'
      - '**.r'
      - 'DESCRIPTION'
      - 'renv.lock'
      - '.github/workflows/r-security.yml'
    branches: [ main ]
  schedule:
    # Run weekly on Mondays at 3 AM UTC
    - cron: '0 3 * * 1'
  workflow_dispatch:

permissions:
  contents: read
  security-events: write

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  security-check:
    name: Security Analysis
    runs-on: ubuntu-22.04

    steps:
    - name: Checkout repository
      uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
      with:
        persist-credentials: false

    - name: Setup R
      uses: r-lib/actions/setup-r@v2
      with:
        r-version: '4.5.0'
        use-public-rspm: true

    - name: Setup R dependencies
      uses: r-lib/actions/setup-r-dependencies@v2
      with:
        extra-packages: |
          any::desc
          any::jsonlite
          any::lintr
          any::goodpractice
          any::pkgdepends
          any::uuid
          any::remotes
          any::pak
        needs: |
          desc
          jsonlite
          lintr
          goodpractice

    - name: Try to install oysteR
      env:
        OSSINDEX_USER: ${{ secrets.OSSINDEX_USER }}
        OSSINDEX_TOKEN: ${{ secrets.OSSINDEX_TOKEN }}
      run: |
        # Try to install oysteR (optional, don't fail if it doesn't work)
        Rscript -e "
        tryCatch({
          # Configure OSS Index if credentials available
          if (Sys.getenv('OSSINDEX_USER') != '' && Sys.getenv('OSSINDEX_TOKEN') != '') {
            config_dir <- file.path(Sys.getenv('HOME'), '.ossindex')
            dir.create(config_dir, recursive = TRUE, showWarnings = FALSE)
            config_file <- file.path(config_dir, '.oss-index-config')
            writeLines(c(
              'ossi:',
              paste0('  Username: ', Sys.getenv('OSSINDEX_USER')),
              paste0('  Token: ', Sys.getenv('OSSINDEX_TOKEN'))
            ), config_file)
          }

          # Try pak first (should be installed by setup-r-dependencies)
          if (requireNamespace('pak', quietly = TRUE)) {
            library(pak)
            pak::pkg_install('sonatype-nexus-community/oysteR', upgrade = FALSE)
          } else if (requireNamespace('remotes', quietly = TRUE)) {
            library(remotes)
            remotes::install_github('sonatype-nexus-community/oysteR', upgrade = 'never')
          } else {
            # Try to install remotes first, then use it
            tryCatch({
              install.packages('remotes')
              library(remotes)
              remotes::install_github('sonatype-nexus-community/oysteR', upgrade = 'never')
            }, error = function(e) {
              # Last resort: try CRAN
              install.packages('oysteR')
            })
          }

          if (requireNamespace('oysteR', quietly = TRUE)) {
            cat('oysteR installed successfully\n')
          }
        }, error = function(e) {
          cat('Could not install oysteR:', conditionMessage(e), '\n')
        })
        "
      continue-on-error: true

    - name: Run dependency vulnerability scan
      env:
        OSSINDEX_USER: ${{ secrets.OSSINDEX_USER }}
        OSSINDEX_TOKEN: ${{ secrets.OSSINDEX_TOKEN }}
      run: |
        Rscript -e "
        library(jsonlite)

        # Create SARIF structure
        create_sarif <- function(results = NULL) {
          list(
            version = '2.1.0',
            `\$schema` = 'https://raw.githubusercontent.com/oasis-tcs/sarif-spec/master/Schemata/sarif-schema-2.1.0.json',
            runs = if(is.null(results)) list() else results
          )
        }

        # Check if oysteR is available
        if (requireNamespace('oysteR', quietly = TRUE)) {
          library(oysteR)

          tryCatch({
            # Audit installed packages
            audit_results <- audit_installed_r_pkgs(verbose = TRUE)
            vulns <- get_vulnerabilities(audit_results)

            if (!is.null(vulns) && nrow(vulns) > 0) {
              cat('Found', nrow(vulns), 'vulnerabilities\n')

              # Create SARIF results
              results <- list(list(
                tool = list(driver = list(
                  name = 'oysteR',
                  version = as.character(packageVersion('oysteR'))
                )),
                results = lapply(seq_len(nrow(vulns)), function(i) {
                  vuln <- vulns[i, ]
                  list(
                    ruleId = paste0('OSS-', i),
                    level = 'warning',
                    message = list(text = paste(
                      'Package:', vuln\$package,
                      'Version:', vuln\$version
                    ))
                  )
                })
              ))

              sarif <- create_sarif(results)
            } else {
              cat('No vulnerabilities found\n')
              sarif <- create_sarif()
            }
          }, error = function(e) {
            cat('Error during scan:', conditionMessage(e), '\n')
            sarif <- create_sarif()
          })
        } else {
          cat('oysteR not available, skipping vulnerability scan\n')
          sarif <- create_sarif()
        }

        # Write SARIF file
        write_json(sarif, 'dependency-scan.sarif', auto_unbox = TRUE, pretty = TRUE)
        "
      continue-on-error: true

    - name: Upload vulnerability scan results
      if: always()
      uses: github/codeql-action/upload-sarif@e2b3eafc8d227b0241d48be5f425d47c2d750a13 # v3.26.10
      with:
        sarif_file: 'dependency-scan.sarif'
        category: 'dependency-scan'
      continue-on-error: true

    - name: License compatibility check
      run: |
        Rscript -e "
        library(desc)

        # Get package license
        pkg_desc <- desc::desc()
        pkg_license <- pkg_desc\$get('License')[[1]]
        pkg_name <- pkg_desc\$get('Package')[[1]]

        cat('Package:', pkg_name, '\n')
        cat('License:', pkg_license, '\n\n')

        # Get dependencies
        deps <- pkg_desc\$get_deps()
        deps <- deps[deps\$type %in% c('Imports', 'Depends') & deps\$package != 'R', ]

        cat('Checking', nrow(deps), 'dependencies...\n')

        # Basic license compatibility check
        if (grepl('GPL-3', pkg_license)) {
          cat('\nNote: GPL-3 license requires careful consideration of dependencies\n')
        }
        "
      continue-on-error: true

    - name: Security-focused code linting
      run: |
        Rscript -e "
        library(lintr)

        # Define security-focused linters
        security_linters <- linters_with_defaults(
          absolute_path_linter(),
          nonportable_path_linter(),
          undesirable_function_linter(fun = c(
            'system' = 'Use system2() for better security',
            'shell' = 'Use system2() for better security',
            'eval' = 'Avoid eval() for security reasons',
            'parse' = 'Avoid parse() for security reasons'
          ))
        )

        # Run linting
        lint_results <- lint_package(linters = security_linters)

        if (length(lint_results) > 0) {
          print(lint_results)
          cat('\n', length(lint_results), 'potential issues found.\n')
        } else {
          cat('No security linting issues found.\n')
        }
        "
      continue-on-error: true

    - name: Good practices check
      run: |
        Rscript -e "
        library(goodpractice)

        # Run focused checks
        gp_results <- gp(checks = c(
          'cyclocomp',
          'no_import_package_as_a_whole',
          'no_export_pattern',
          'truefalse_not_tf'
        ))

        print(gp_results)
        "
      continue-on-error: true

    - name: Generate SBOM
      run: |
        Rscript -e "
        library(desc)
        library(jsonlite)
        library(pkgdepends)
        library(uuid)

        desc_obj <- desc::desc()

        # Get dependencies
        deps <- desc_obj\$get_deps()

        # Create simple SBOM
        sbom <- list(
          bomFormat = 'CycloneDX',
          specVersion = '1.5',
          serialNumber = paste0('urn:uuid:', UUIDgenerate()),
          version = 1,
          metadata = list(
            timestamp = format(Sys.time(), '%Y-%m-%dT%H:%M:%SZ'),
            component = list(
              type = 'library',
              name = desc_obj\$get('Package')[[1]],
              version = desc_obj\$get('Version')[[1]]
            )
          ),
          components = lapply(deps[deps\$package != 'R', 'package'], function(pkg) {
            list(
              type = 'library',
              name = pkg,
              purl = paste0('pkg:cran/', pkg)
            )
          })
        )

        write_json(sbom, 'r-package-sbom.json', auto_unbox = TRUE, pretty = TRUE)
        cat('SBOM generated successfully.\n')
        "

    - name: Upload SBOM
      uses: actions/upload-artifact@b4b15b8c7c6ac21ea08fcf65892d2ee8f75cf882 # v4.4.3
      with:
        name: r-package-sbom
        path: r-package-sbom.json
        retention-days: 30

    - name: Dependency Review (PR only)
      if: github.event_name == 'pull_request'
      uses: actions/dependency-review-action@da24556b548a50705dd671f47852072ea4c105d9 # v4.7.1
      with:
        vulnerability-check: true
        license-check: true
        fail-on-severity: high
      continue-on-error: true
