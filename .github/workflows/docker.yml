# Docker CI/CD workflow for hetid R package
# Implements 2025 best practices for container testing and deployment

name: Docker Build and Test

on:
  push:
    branches: [ main, develop ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      push_images:
        description: 'Push images to registry'
        required: false
        default: false
        type: boolean

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Build and test Docker images
  docker-build-test:
    runs-on: ubuntu-22.04
    strategy:
      matrix:
        target: [builder, production, development]

    permissions:
      contents: read
      packages: write

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      with:
        driver-opts: |
          network=host

    - name: Log in to Container Registry
      if: github.event_name != 'pull_request'
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=sha,prefix={{branch}}-,enable={{is_default_branch}}
          type=sha,prefix=sha-,enable=${{ github.event_name == 'pull_request' }}
        flavor: |
          suffix=-${{ matrix.target }}

    - name: Build Docker image (non-development)
      if: matrix.target != 'development'
      uses: docker/build-push-action@v6
      with:
        context: .
        file: Dockerfile
        target: ${{ matrix.target }}
        platforms: linux/amd64
        push: false
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        outputs: type=docker,dest=/tmp/${{ matrix.target }}-image.tar

    - name: Build Docker image (development)
      if: matrix.target == 'development'
      uses: docker/build-push-action@v6
      with:
        context: .
        file: Dockerfile.dev
        platforms: linux/amd64
        push: false
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        outputs: type=docker,dest=/tmp/${{ matrix.target }}-image.tar

    - name: Save image info
      id: save-image
      run: |
        # Get the first tag from the list
        TAG=$(echo "${{ steps.meta.outputs.tags }}" | head -n 1)
        echo "tag=${TAG}" >> $GITHUB_OUTPUT
        # Save tag to file for later use
        echo "${TAG}" > /tmp/${{ matrix.target }}-tag.txt
        # Verify file was created
        if [ -f /tmp/${{ matrix.target }}-tag.txt ]; then
          echo "Tag file created successfully: $(cat /tmp/${{ matrix.target }}-tag.txt)"
        else
          echo "Warning: Tag file was not created"
        fi
        
    - name: Upload image artifact
      uses: actions/upload-artifact@v4
      with:
        name: docker-image-${{ matrix.target }}
        path: /tmp/${{ matrix.target }}-image.tar
        retention-days: 1
        compression-level: 0  # Docker images are already compressed
        
    - name: Upload tag artifact
      uses: actions/upload-artifact@v4
      with:
        name: docker-tag-${{ matrix.target }}
        path: /tmp/${{ matrix.target }}-tag.txt
        retention-days: 1

  # Test package functionality in Docker
  docker-test:
    needs: docker-build-test
    runs-on: ubuntu-22.04

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Download builder image artifact
      uses: actions/download-artifact@v4
      with:
        name: docker-image-builder
        path: /tmp

    - name: Download builder tag artifact
      uses: actions/download-artifact@v4
      with:
        name: docker-tag-builder
        path: /tmp
    
    - name: Verify downloaded artifacts
      run: |
        echo "Contents of /tmp:"
        ls -la /tmp/
        if [ -f /tmp/builder-tag.txt ]; then
          echo "Tag file found: $(cat /tmp/builder-tag.txt)"
        else
          echo "Warning: builder-tag.txt not found"
        fi
        
    - name: Load Docker image
      run: |
        docker load --input /tmp/builder-image.tar
        # Read the tag from the artifact
        if [ -f /tmp/builder-tag.txt ]; then
          IMAGE_TAG=$(cat /tmp/builder-tag.txt)
          echo "Using image tag from artifact: ${IMAGE_TAG}"
        else
          # Fallback: get the tag from loaded images
          IMAGE_TAG=$(docker images --format "{{.Repository}}:{{.Tag}}" | grep -v "<none>" | head -n 1)
          echo "Using image tag from docker images: ${IMAGE_TAG}"
        fi
        echo "TAG_NAME=${IMAGE_TAG}" >> $GITHUB_OUTPUT
      id: image_tag_step

    - name: Run package tests
      env:
        IMAGE_NAME: ${{ steps.image_tag_step.outputs.TAG_NAME }}
      run: |
        echo "Testing image: $IMAGE_NAME"

        # Run package tests - devtools is already in the builder image
        docker run --rm \
          -v ${{ github.workspace }}:/workspace \
          -e R_LIBS_USER=/usr/local/lib/R/site-library \
          $IMAGE_NAME \
          bash -c "cd /workspace && R -e \"library(devtools); devtools::test()\""

    - name: Run R CMD check
      env:
        IMAGE_NAME: ${{ steps.image_tag_step.outputs.TAG_NAME }}
      run: |
        echo "Testing image for R CMD check: $IMAGE_NAME"

        docker run --rm \
          -v ${{ github.workspace }}:/workspace \
          -w /workspace \
          $IMAGE_NAME \
          bash -c "R CMD build . && R CMD check --as-cran *.tar.gz"

    - name: Test package loading
      env:
        IMAGE_NAME: ${{ steps.image_tag_step.outputs.TAG_NAME }}
      run: |
        echo "Testing package loading in image: $IMAGE_NAME"

        docker run --rm $IMAGE_NAME \
          R -e "library(hetid); packageVersion('hetid'); cat('Package loaded successfully\n')"

  # Test production image functionality
  production-test:
    needs: docker-build-test
    runs-on: ubuntu-22.04

    steps:
    - name: Download production image artifact
      uses: actions/download-artifact@v4
      with:
        name: docker-image-production
        path: /tmp

    - name: Download production tag artifact
      uses: actions/download-artifact@v4
      with:
        name: docker-tag-production
        path: /tmp
    
    - name: Verify downloaded production artifacts
      run: |
        echo "Contents of /tmp:"
        ls -la /tmp/
        if [ -f /tmp/production-tag.txt ]; then
          echo "Tag file found: $(cat /tmp/production-tag.txt)"
        else
          echo "Warning: production-tag.txt not found"
        fi
        
    - name: Load Docker image
      run: |
        docker load --input /tmp/production-image.tar
        # Read the tag from the artifact
        if [ -f /tmp/production-tag.txt ]; then
          IMAGE_TAG=$(cat /tmp/production-tag.txt)
          echo "Using image tag from artifact: ${IMAGE_TAG}"
        else
          # Fallback: get the tag from loaded images
          IMAGE_TAG=$(docker images --format "{{.Repository}}:{{.Tag}}" | grep -v "<none>" | head -n 1)
          echo "Using image tag from docker images: ${IMAGE_TAG}"
        fi
        echo "TAG_NAME=${IMAGE_TAG}" >> $GITHUB_OUTPUT
      id: prod_image_tag_step

    - name: Test production image
      env:
        PROD_IMAGE_NAME: ${{ steps.prod_image_tag_step.outputs.TAG_NAME }}
      run: |
        echo "Testing production image: $PROD_IMAGE_NAME"

        # Test basic functionality
        docker run --rm $PROD_IMAGE_NAME \
          R -e "library(hetid); cat('Production image test passed\n')"

        # Test health check
        echo "Starting health check test for $PROD_IMAGE_NAME"
        # Run container in detached mode
        CONTAINER_ID=$(docker run -d $PROD_IMAGE_NAME tail -f /dev/null)
        echo "Container ID: $CONTAINER_ID"

        # Wait for initial start period
        sleep 10

        # Check health status
        HEALTH_STATUS=$(docker inspect --format='{{.State.Health.Status}}' $CONTAINER_ID 2>/dev/null || echo "no_health")
        echo "Health status: $HEALTH_STATUS"

        if [ "$HEALTH_STATUS" = "healthy" ] || [ "$HEALTH_STATUS" = "no_health" ]; then
            echo "Health check passed or not configured"
            RESULT=0
        else
            echo "Health check failed: $HEALTH_STATUS"
            docker logs $CONTAINER_ID
            RESULT=1
        fi

        # Cleanup
        docker stop $CONTAINER_ID >/dev/null 2>&1
        docker rm $CONTAINER_ID >/dev/null 2>&1

        exit $RESULT

  # Security scanning
  security-scan:
    needs: docker-build-test
    runs-on: ubuntu-22.04

    permissions:
      contents: read
      security-events: write

    steps:
    - name: Download production image artifact
      uses: actions/download-artifact@v4
      with:
        name: docker-image-production
        path: /tmp

    - name: Download production tag artifact
      uses: actions/download-artifact@v4
      with:
        name: docker-tag-production
        path: /tmp
    
    - name: Verify downloaded security scan artifacts
      run: |
        echo "Contents of /tmp:"
        ls -la /tmp/
        if [ -f /tmp/production-tag.txt ]; then
          echo "Tag file found: $(cat /tmp/production-tag.txt)"
        else
          echo "Warning: production-tag.txt not found"
        fi
        
    - name: Load Docker image
      run: |
        docker load --input /tmp/production-image.tar
        # Read the tag from the artifact
        if [ -f /tmp/production-tag.txt ]; then
          IMAGE_TAG=$(cat /tmp/production-tag.txt)
          echo "Using image tag from artifact: ${IMAGE_TAG}"
        else
          # Fallback: get the tag from loaded images
          IMAGE_TAG=$(docker images --format "{{.Repository}}:{{.Tag}}" | grep -v "<none>" | head -n 1)
          echo "Using image tag from docker images: ${IMAGE_TAG}"
        fi
        echo "IMAGE_NAME=${IMAGE_TAG}" >> $GITHUB_OUTPUT
      id: get-image

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@0.31.0
      with:
        image-ref: ${{ steps.get-image.outputs.IMAGE_NAME }}
        format: 'sarif'
        output: 'trivy-results.sarif'
        severity: 'CRITICAL,HIGH'

    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@e2b3eafc8d227b0241d48be5f425d47c2d750a13 # v3.26.10
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  # Scan Dockerfiles and workflows for security issues
  config-security-scan:
    runs-on: ubuntu-22.04
    permissions:
      contents: read
      security-events: write

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Run Trivy on Dockerfiles
      uses: aquasecurity/trivy-action@0.31.0
      with:
        scan-type: 'config'
        scan-ref: '.'
        format: 'sarif'
        output: 'dockerfile-trivy-results.sarif'
        severity: 'CRITICAL,HIGH,MEDIUM'
        skip-dirs: '.git,node_modules,renv'

    - name: Upload Dockerfile scan results
      uses: github/codeql-action/upload-sarif@e2b3eafc8d227b0241d48be5f425d47c2d750a13 # v3.26.10
      if: always()
      with:
        sarif_file: 'dockerfile-trivy-results.sarif'
        category: 'dockerfile-security'

    - name: Run Trivy on GitHub Actions workflows
      uses: aquasecurity/trivy-action@0.31.0
      with:
        scan-type: 'config'
        scan-ref: '.github/workflows'
        format: 'sarif'
        output: 'workflow-trivy-results.sarif'
        severity: 'CRITICAL,HIGH,MEDIUM'

    - name: Upload workflow scan results
      uses: github/codeql-action/upload-sarif@e2b3eafc8d227b0241d48be5f425d47c2d750a13 # v3.26.10
      if: always()
      with:
        sarif_file: 'workflow-trivy-results.sarif'
        category: 'workflow-security'

  # Push images to registry
  docker-push:
    if: github.event_name != 'pull_request' && (github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/') || github.event.inputs.push_images == 'true')
    needs: [docker-test, production-test, security-scan, config-security-scan]
    runs-on: ubuntu-22.04
    strategy:
      matrix:
        target: [production, development]

    permissions:
      contents: read
      packages: write

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=raw,value=latest,enable={{is_default_branch}}
        flavor: |
          suffix=${{ matrix.target == 'production' && '' || format('-{0}', matrix.target) }}

    - name: Build and push Docker image (non-development)
      if: matrix.target != 'development'
      uses: docker/build-push-action@v6
      with:
        context: .
        file: Dockerfile
        target: ${{ matrix.target }}
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Build and push Docker image (development)
      if: matrix.target == 'development'
      uses: docker/build-push-action@v6
      with:
        context: .
        file: Dockerfile.dev
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  # Cleanup artifacts
  cleanup:
    if: always()
    needs: [docker-test, production-test, security-scan, config-security-scan]
    runs-on: ubuntu-22.04

    steps:
    - name: Delete artifacts
      uses: geekyeggo/delete-artifact@v5
      with:
        name: |
          docker-image-builder
          docker-image-production
          docker-image-development
          docker-tag-builder
          docker-tag-production
          docker-tag-development
