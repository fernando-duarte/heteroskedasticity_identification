# Docker CI/CD workflow for hetid R package
# Implements 2025 best practices for container testing and deployment

name: Docker Build and Test

on:
  push:
    branches: [ main, develop ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      push_images:
        description: 'Push images to registry'
        required: false
        default: false
        type: boolean

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Build and test Docker images
  docker-build-test:
    runs-on: ubuntu-22.04
    strategy:
      matrix:
        target: [builder, production, development]

    permissions:
      contents: read
      packages: write

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      with:
        driver-opts: |
          network=host

    - name: Log in to Container Registry
      if: github.event_name != 'pull_request'
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=sha,prefix={{branch}}-,enable={{is_default_branch}}
          type=sha,prefix=sha-,enable=${{ github.event_name == 'pull_request' }}
        flavor: |
          suffix=-${{ matrix.target }}

    - name: Build Docker image (non-development)
      if: matrix.target != 'development'
      uses: docker/build-push-action@v6
      with:
        context: .
        file: Dockerfile
        target: ${{ matrix.target }}
        platforms: linux/amd64
        push: false
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        outputs: type=docker,dest=/tmp/${{ matrix.target }}-image.tar

    - name: Build Docker image (development)
      if: matrix.target == 'development'
      uses: docker/build-push-action@v6
      with:
        context: .
        file: Dockerfile.dev
        platforms: linux/amd64
        push: false
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        outputs: type=docker,dest=/tmp/${{ matrix.target }}-image.tar

    - name: Upload image artifact
      uses: actions/upload-artifact@v4
      with:
        name: docker-image-${{ matrix.target }}
        path: /tmp/${{ matrix.target }}-image.tar
        retention-days: 1

  # Test package functionality in Docker
  docker-test:
    needs: docker-build-test
    runs-on: ubuntu-22.04

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Download builder image
      uses: actions/download-artifact@v4
      with:
        name: docker-image-builder
        path: /tmp

    - name: Load Docker image
      run: docker load --input /tmp/builder-image.tar

    - name: Run package tests
      run: |
        # Get the image name from the loaded image
        IMAGE_NAME=$(docker images --format "table {{.Repository}}:{{.Tag}}" | grep builder | head -1)
        echo "Testing image: $IMAGE_NAME"

        # Run package tests
        # Since the package is already installed in the image, we'll test it directly
        # Mount workspace to access test files if needed
        docker run --rm \
          -v ${{ github.workspace }}:/workspace \
          $IMAGE_NAME \
          bash -c "cd /workspace && R -e \"library(hetid); devtools::test()\""

    - name: Run R CMD check
      run: |
        IMAGE_NAME=$(docker images --format "table {{.Repository}}:{{.Tag}}" | grep builder | head -1)

        docker run --rm \
          -v ${{ github.workspace }}:/workspace \
          -w /workspace \
          $IMAGE_NAME \
          bash -c "R CMD build . && R CMD check --as-cran *.tar.gz"

    - name: Test package loading
      run: |
        IMAGE_NAME=$(docker images --format "table {{.Repository}}:{{.Tag}}" | grep builder | head -1)

        docker run --rm $IMAGE_NAME \
          R -e "library(hetid); packageVersion('hetid'); cat('Package loaded successfully\n')"

  # Test production image functionality
  production-test:
    needs: docker-build-test
    runs-on: ubuntu-22.04

    steps:
    - name: Download production image
      uses: actions/download-artifact@v4
      with:
        name: docker-image-production
        path: /tmp

    - name: Load Docker image
      run: docker load --input /tmp/production-image.tar

    - name: Test production image
      run: |
        IMAGE_NAME=$(docker images --format "table {{.Repository}}:{{.Tag}}" | grep production | head -1)
        echo "Testing production image: $IMAGE_NAME"

        # Test basic functionality
        docker run --rm $IMAGE_NAME \
          R -e "library(hetid); cat('Production image test passed\n')"

        # Test health check
        docker run --rm --health-interval=5s --health-timeout=3s $IMAGE_NAME sleep 10

  # Security scanning
  security-scan:
    needs: docker-build-test
    runs-on: ubuntu-22.04

    permissions:
      contents: read
      security-events: write

    steps:
    - name: Download production image
      uses: actions/download-artifact@v4
      with:
        name: docker-image-production
        path: /tmp

    - name: Load Docker image
      run: docker load --input /tmp/production-image.tar

    - name: Get image name
      id: get-image
      run: |
        IMAGE_NAME=$(docker images --format "table {{.Repository}}:{{.Tag}}" | grep production | head -1)
        echo "IMAGE_NAME=$IMAGE_NAME" >> $GITHUB_OUTPUT

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@0.28.0
      with:
        image-ref: ${{ steps.get-image.outputs.IMAGE_NAME }}
        format: 'sarif'
        output: 'trivy-results.sarif'
        severity: 'CRITICAL,HIGH'

    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  # Push images to registry
  docker-push:
    if: github.event_name != 'pull_request' && (github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/') || github.event.inputs.push_images == 'true')
    needs: [docker-test, production-test]
    runs-on: ubuntu-22.04
    strategy:
      matrix:
        target: [production, development]

    permissions:
      contents: read
      packages: write

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=raw,value=latest,enable={{is_default_branch}}
        flavor: |
          suffix=${{ matrix.target == 'production' && '' || format('-{0}', matrix.target) }}

    - name: Build and push Docker image (non-development)
      if: matrix.target != 'development'
      uses: docker/build-push-action@v6
      with:
        context: .
        file: Dockerfile
        target: ${{ matrix.target }}
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Build and push Docker image (development)
      if: matrix.target == 'development'
      uses: docker/build-push-action@v6
      with:
        context: .
        file: Dockerfile.dev
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  # Cleanup artifacts
  cleanup:
    if: always()
    needs: [docker-test, production-test, security-scan]
    runs-on: ubuntu-22.04

    steps:
    - name: Delete artifacts
      uses: geekyeggo/delete-artifact@v4
      with:
        name: |
          docker-image-builder
          docker-image-production
          docker-image-development
