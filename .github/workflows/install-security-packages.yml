name: Install Security Packages

on:
  workflow_call:
    outputs:
      cache-hit:
        description: 'Whether cache was hit'
        value: ${{ jobs.install.outputs.cache-hit }}

jobs:
  install:
    runs-on: ubuntu-22.04 # Consistent with r-security.yml
    outputs:
      cache-hit: ${{ steps.cache.outputs.cache-hit }}
    steps:
      - name: Checkout repository # Needed for hashFiles('DESCRIPTION')
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

      - name: Setup R
        uses: r-lib/actions/setup-r@v2
        with:
          r-version: '4.3.0' # From guide
          use-public-rspm: true

      - name: Get R major.minor version # For cache key consistency
        id: r-version-string
        run: |
          echo "version=$(Rscript -e "v <- getRversion(); cat(v\$major, v\$minor, sep='.')")" >> $GITHUB_OUTPUT
        shell: bash

      - name: Cache R packages
        id: cache
        uses: actions/cache@6849a6489940f00c2f30c0fb92c6274307ccb58a # v4.1.2
        with:
          path: |
            ${{ env.R_LIBS_USER }}
            ~/.cache/R # As per guide
          key: security-r-${{ runner.os }}-${{ steps.r-version-string.outputs.version }}-${{ hashFiles('DESCRIPTION') }}-v2 # Key from guide, using major.minor R version
          restore-keys: |
            security-r-${{ runner.os }}-${{ steps.r-version-string.outputs.version }}-
            security-r-${{ runner.os }}-

      - name: Install security packages
        if: steps.cache.outputs.cache-hit != 'true'
        env:
          # Set OSS Index credentials if available (2025 best practice for oysteR)
          OSSINDEX_USER: ${{ secrets.OSSINDEX_USER }}
          OSSINDEX_TOKEN: ${{ secrets.OSSINDEX_TOKEN }}
        run: |
          # Core packages
          install.packages(c("desc", "jsonlite", "lintr", "pkgdepends", "uuid"))
          
          # Install pak for better package management (2025 recommended approach)
          if (!requireNamespace("pak", quietly = TRUE)) {
            install.packages("pak", repos = sprintf(
              "https://r-lib.github.io/p/pak/stable/%s/%s/%s",
              .Platform$pkgType,
              R.Version()$os,
              R.Version()$arch
            ))
          }
          
          # Configure OSS Index authentication for oysteR if credentials are available
          if (Sys.getenv("OSSINDEX_USER") != "" && Sys.getenv("OSSINDEX_TOKEN") != "") {
            message("OSS Index credentials detected. oysteR will use authenticated requests.")
            # Alternative: Create ~/.ossindex/.oss-index-config file
            config_dir <- file.path(Sys.getenv("HOME"), ".ossindex")
            if (!dir.exists(config_dir)) {
              dir.create(config_dir, recursive = TRUE)
            }
            config_file <- file.path(config_dir, ".oss-index-config")
            writeLines(c(
              "# This config file is picked up by oysteR and other Sonatype apps",
              "ossi:",
              paste0("  Username: ", Sys.getenv("OSSINDEX_USER")),
              paste0("  Token: ", Sys.getenv("OSSINDEX_TOKEN"))
            ), config_file)
            message("Created OSS Index config file for authentication")
          } else {
            message("No OSS Index credentials found. oysteR may hit rate limits.")
            message("To avoid rate limits, set OSSINDEX_USER and OSSINDEX_TOKEN secrets in your repository.")
            message("Register at https://ossindex.sonatype.org/ to get credentials.")
          }

          # Install oysteR with multiple fallback options
          oyster_installed <- FALSE

          # Method 1: Try with pak (handles GitHub rate limits better)
          if (!oyster_installed) {
            tryCatch({
              message("Attempting to install oysteR with pak...")
              pak::pkg_install("sonatype-nexus-community/oysteR", upgrade = FALSE)
              if (requireNamespace("oysteR", quietly = TRUE)) {
                oyster_installed <- TRUE
                message("Successfully installed oysteR with pak")
              }
            }, error = function(e) {
              message("pak installation failed: ", conditionMessage(e))
            })
          }

          # Method 2: Try CRAN if available
          if (!oyster_installed) {
            tryCatch({
              message("Attempting to install oysteR from CRAN...")
              install.packages("oysteR")
              if (requireNamespace("oysteR", quietly = TRUE)) {
                oyster_installed <- TRUE
                message("Successfully installed oysteR from CRAN")
              }
            }, error = function(e) {
              message("CRAN installation failed: ", conditionMessage(e))
            })
          }

          # Method 3: Try remotes with specific ref
          if (!oyster_installed) {
            tryCatch({
              message("Attempting to install oysteR with remotes from specific commit...")
              if (!requireNamespace("remotes", quietly = TRUE)) {
                install.packages("remotes")
              }
              # Use a specific commit/tag to avoid potential issues with master
              remotes::install_github("sonatype-nexus-community/oysteR@master",
                                    upgrade = "never",
                                    force = TRUE,
                                    quiet = FALSE)
              if (requireNamespace("oysteR", quietly = TRUE)) {
                oyster_installed <- TRUE
                message("Successfully installed oysteR with remotes")
              }
            }, error = function(e) {
              message("remotes installation failed: ", conditionMessage(e))
            })
          }

          # Method 4: Try downloading and installing manually
          if (!oyster_installed) {
            tryCatch({
              message("Attempting manual download and install of oysteR...")
              temp_file <- tempfile(fileext = ".tar.gz")
              download.file(
                "https://github.com/sonatype-nexus-community/oysteR/archive/refs/heads/master.tar.gz",
                destfile = temp_file,
                method = "curl",
                quiet = FALSE
              )
              install.packages(temp_file, repos = NULL, type = "source")
              if (requireNamespace("oysteR", quietly = TRUE)) {
                oyster_installed <- TRUE
                message("Successfully installed oysteR manually")
              }
              unlink(temp_file)
            }, error = function(e) {
              message("Manual installation failed: ", conditionMessage(e))
            })
          }

          # If all methods fail, make it optional rather than failing the job
          if (!oyster_installed) {
            warning("Could not install oysteR package. Security scanning will be limited.")
          }

          # Install goodpractice
          install.packages("goodpractice")

          # Verify other installations (oysteR is now optional)
          required_pkgs <- c("desc", "jsonlite", "lintr", "goodpractice", "pkgdepends", "uuid")
          for (pkg in required_pkgs) {
            if (!requireNamespace(pkg, quietly = TRUE)) {
              stop(paste("Failed to install or verify required package:", pkg))
            }
          }

          # Report installation status
          if (oyster_installed) {
            cat("All security packages including oysteR installed successfully\n")
          } else {
            cat("Security packages installed (except oysteR)\n")
          }
        shell: Rscript {0}
