# syntax=docker/dockerfile:1.7
# Development Dockerfile for hetid R package
# Optimized for interactive development with RStudio Server
# Includes all development tools and debugging capabilities

FROM rocker/rstudio:4.4.3

# Development metadata
LABEL org.opencontainers.image.title="hetid Development Environment"
LABEL org.opencontainers.image.description="Full development environment for heteroskedasticity identification package"
LABEL org.opencontainers.image.version="0.1.0-dev"
LABEL org.opencontainers.image.source="https://github.com/fernando-duarte/heteroskedasticity_identification"
LABEL org.opencontainers.image.licenses="MIT"
LABEL org.opencontainers.image.authors="Fernando Duarte <duarte@alum.mit.edu>"

# Install comprehensive system dependencies
RUN --mount=type=cache,target=/var/cache/apt \
    --mount=type=cache,target=/var/lib/apt \
    apt-get update && apt-get install -y \
    # Core development tools
    build-essential \
    git \
    vim \
    nano \
    htop \
    curl \
    wget \
    tree \
    less \
    # R package compilation dependencies
    libcurl4-openssl-dev \
    libssl-dev \
    libxml2-dev \
    libfontconfig1-dev \
    libharfbuzz-dev \
    libfribidi-dev \
    libfreetype6-dev \
    libpng-dev \
    libtiff5-dev \
    libjpeg-dev \
    zlib1g-dev \
    libgit2-dev \
    libssh2-1-dev \
    # Statistical computing dependencies
    libgsl-dev \
    liblapack-dev \
    libblas-dev \
    # Parallel processing support
    libopenmpi-dev \
    # Additional development utilities
    pandoc \
    qpdf \
    && rm -rf /var/lib/apt/lists/*

# Install pak for fast parallel package installation
RUN R -e "install.packages('pak', repos = 'https://r-lib.github.io/p/pak/stable/')"

# Install comprehensive R development packages using pak (40-50% faster)
RUN R -e "pak::pkg_install(c( \
        'devtools', 'remotes', 'usethis', \
        'testthat', 'covr', 'lintr', 'styler', \
        'roxygen2', 'pkgdown', 'rmarkdown', 'knitr', \
        'profvis', 'bench', 'here', 'fs', 'glue', 'cli', \
        'tinytex' \
    ), lib = .libPaths()[1])"

# Install TinyTeX for LaTeX support (replaces heavy texlive packages)
RUN R -e "tinytex::install_tinytex(force = TRUE, dir = '/opt/TinyTeX', extra_packages = c('inconsolata', 'times', 'tex-gyre', 'fancyhdr', 'natbib', 'caption'))" && \
    /opt/TinyTeX/bin/*/tlmgr path add

# Ensure TinyTeX is in PATH
ENV PATH="/opt/TinyTeX/bin/x86_64-linux:${PATH}"

# Configure R for development (before setting up directories)
RUN echo "options(repos = c(CRAN = 'https://cloud.r-project.org/'))" >> /usr/local/lib/R/etc/Rprofile.site && \
    echo "options(download.file.method = 'libcurl')" >> /usr/local/lib/R/etc/Rprofile.site && \
    echo "options(timeout = 300)" >> /usr/local/lib/R/etc/Rprofile.site && \
    echo "options(pak.no_extra_messages = TRUE)" >> /usr/local/lib/R/etc/Rprofile.site

# Set up development environment
WORKDIR /home/rstudio

# Create project directory with proper permissions
RUN mkdir -p /home/rstudio/hetid && \
    chown -R rstudio:rstudio /home/rstudio

# Set development environment variables
ENV DISABLE_AUTH=true
ENV ROOT=true
ENV RSTUDIO_WHICH_R=/usr/local/bin/R

# Expose RStudio Server port
EXPOSE 8787

# Health check for RStudio Server
HEALTHCHECK --interval=30s --timeout=10s --start-period=30s --retries=3 \
    CMD curl -f http://localhost:8787/ || exit 1

# Default command
CMD ["/init"]
